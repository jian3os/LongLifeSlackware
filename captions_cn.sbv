0:00:28.180,0:00:32.620
大家通常认为 Slackware 很难安装
其实不然，安装很容易

0:00:32.640,0:00:37.720
安装后的配置才是“复杂”部分

0:00:37.820,0:00:42.100
用户需要花点心思阅读文档

0:00:42.540,0:00:46.920
(长生不老 Slackware...)

0:00:47.860,0:00:56.200
Slackware 项目起始于 Patrick 在明尼苏达州立大学摩海德分校就读时

0:00:56.420,0:01:02.520
当时他在寻找一款 Lisp 解释器

0:01:02.520,0:01:07.820
他找到了一款 GNU/Linux 发行版，名字叫 SLS (Softlanding Linux System), 软着陆 Linux 系统

0:01:08.200,0:01:12.840
从那时起，他就每天使用这个系统

0:01:13.520,0:01:18.540
面对这样一个新的未知世界，为了更好地使用这个系统

0:01:18.580,0:01:24.920
他开始为 SLS 系统添加补丁

0:01:24.920,0:01:32.060
很快他的更新速度就超过了 SLS 项目本身

0:01:32.060,0:01:38.800
他提交补丁给 SLS 项目

0:01:38.800,0:01:42.440
但他们没有采纳

0:01:42.460,0:01:47.780
然后, 我想他有点逆反

0:01:47.780,0:01:53.160
他决定另起炉灶，起名叫 Slackware

0:01:53.160,0:01:58.620
1993年7月17日,半夜过了十六分钟

0:01:58.620,0:02:04.435
他们通过 FTP 上传了 Slackware 的第一版

0:02:04.435,0:02:07.295
SLS 是第一代发行版

0:02:07.300,0:02:10.445
我们可以说 Slackware 是第二代发行版

0:02:10.445,0:02:14.700
就当时来说，Slackware 并不是始作俑者

0:02:14.700,0:02:18.460
但是一款有名字的发行版

0:02:18.460,0:02:26.080
目前来说，它仍然是还在开发的最老的发行版

0:02:28.900,0:02:32.440
(Slackware 可以用来干什么？)

0:02:33.140,0:02:38.840
用途很多，对服务器来说，Slackware 非常稳定

0:02:38.900,0:02:43.880
Slackware 素来在稳定性方面享有盛名

0:02:43.880,0:02:45.960
坚如磐石，稳如泰山

0:02:45.960,0:02:49.860
也可以当作普通桌面系统供日常使用

0:02:49.860,0:02:52.960
我像世界上的很多人一样

0:02:52.960,0:02:59.400
把 Slackware 作为首选操作系统

0:02:59.520,0:03:02.900
也可用于学术研究

0:03:02.900,0:03:05.505
在学校，甚至在家里

0:03:05.505,0:03:07.920
都可以研究这个系统

0:03:07.920,0:03:11.560
当然现如今其他发行版都包含了很多其他东西

0:03:11.560,0:03:14.440
都在进步，Slackware 好像落后了

0:03:14.440,0:03:19.500
Slackware 并不会跟进 GNU/Linux 的所有技术进步

0:03:19.500,0:03:24.160
有些技术他落后了很远，比如 PAM，SystemD 等等

0:03:24.160,0:03:31.380
如果你想学习通过文本模式如何配置整个系统

0:03:31.380,0:03:34.220
没有友好的界面让你去点来点去

0:03:34.220,0:03:37.240
你只需要打开记事... 没有记事本（呵呵）

0:03:37.240,0:03:47.760
你只需要打开任何一款文本编辑器，就可以完成大部分的编辑

0:03:47.760,0:03:50.180
所以在学术研究领域很受欢迎

0:03:51.140,0:03:54.420
(Slackware遵循什么哲学思想?)

0:03:55.220,0:03:59.940
Slackware 有一个哲学思想叫做：KISS（Keep It Simple, Stupid），保持简单易用

0:03:59.940,0:04:04.080
这个哲学思想由 Navy 于1960年创建于美国

0:04:04.080,0:04:08.480
目标是保持事物的极简

0:04:08.480,0:04:11.980
舍弃那些你不需要的东西

0:04:12.100,0:04:16.800
Slackware 跟风了这个潮流，遵循了这个哲学思想

0:04:16.960,0:04:21.380
你可以看到 Slackware 的安装界面，他仅仅是个对话框

0:04:21.380,0:04:27.560
看起来像是上世纪八九十年代的老式对话框

0:04:27.560,0:04:31.100
从一开始它就用的这个界面，简单

0:04:31.100,0:04:34.460
你单只需要一些

0:04:34.460,0:04:40.120
很少的敲键盘，你就可以很容易地安装 Slackware

0:04:40.140,0:04:45.560
所以依照这个哲学思想它就保持了极简

0:04:46.900,0:04:50.140
(Slackware 官网上的 ISO 过期了吗？)

0:04:50.460,0:04:55.720
新手，或者初学者，开始使用这个系统的人都会到 Slackware 官网

0:04:55.720,0:05:01.380
大家看到 14.2 发行版的 ISO 是 2016年的

0:05:01.400,0:05:04.700
看到后都会说，“我擦，太过期了吧”

0:05:04.700,0:05:10.260
但实际上官网提供的只是稳定版了

0:05:10.260,0:05:14.820
Slackware 有两套工作流程，有两个类别

0:05:14.820,0:05:16.820
包，我可以这样讲吗？

0:05:16.820,0:05:22.360
一个是稳定版，你可以用在服务器上

0:05:22.360,0:05:24.900
或者做普通用途，是一个较老的版本

0:05:24.900,0:05:29.560
它只做系统安全方面的更新

0:05:29.560,0:05:31.760
只有安全补丁

0:05:31.760,0:05:35.460
同时还有另一个版本
叫做 current (当下)

0:05:35.460,0:05:37.840
这个版本每天都在更新

0:05:37.840,0:05:42.400
每天对 Slackware 的更新都会在这个当下版本中

0:05:42.400,0:05:45.260
这个版本不太稳定

0:05:45.280,0:05:49.020
它可能会死机，因为它是一个开发版本
就像它的名字一下，current (当下)

0:05:49.020,0:05:51.320
所以几乎每天都会有更新

0:05:51.320,0:05:54.300
不幸的是这个版本在官网没有提供下载

0:05:54.300,0:05:59.840
但是我们可以从 AlienBOB 的网站下载，夸张地讲，AlienBoB 就是 Patrick 的右手

0:05:59.840,0:06:03.160
你可以从他的网站上下载到当下版

0:06:03.160,0:06:06.860
尝尝鲜

0:06:06.920,0:06:13.200
当下版是在开发中的，比如说，从官网下载的 14.2 稳定版

0:06:13.200,0:06:18.100
仍然采用的是 KDE4，但当下版中已经用的是 KDE5了，懂了吧？

0:06:18.100,0:06:22.840
有一坨很酷的更新，可以去看看

0:06:22.840,0:06:28.400
如果你使用的是稳定版，可以到镜像网站看看

0:06:28.400,0:06:31.960
位于 /etc/slackpkg/mirrors

0:06:31.960,0:06:34.720
你可以去那修改镜像地址，修改为当下版也可以

0:06:34.720,0:06:39.680
你可以将系统升级为当下版

0:06:39.680,0:06:44.080
但是我不推荐那个版本，如果你需要一个完全稳定的工作环境的话。

0:06:44.080,0:06:49.080
这个版本要我说，也“稳定”，但不如稳定版稳定

0:06:49.080,0:06:51.240
如此说来，Slackware 是不会过期的

0:06:51.280,0:06:55.000
并且每天都有更新

0:06:55.000,0:06:59.720
Patrick 已经做出了杰出的贡献，年复一年，年复数年 

0:07:00.460,0:07:02.700
(Slackware 是完全自由的软件吗?)

0:07:04.380,0:07:07.460
严格地说它是也不是

0:07:07.600,0:07:14.400
很多软件都遵循自由软件基金会(FSF)协议

0:07:14.400,0:07:17.375
但是也有私有软件

0:07:17.380,0:07:20.900
所以它不是一个100%的自由软件

0:07:20.900,0:07:26.640
如果你访问 FSF，你会发现如下字样：“我们不支持此发行版”

0:07:26.640,0:07:28.920
Slackware 赫然在列

0:07:29.280,0:07:35.780
因为它默认包含了私有软件 xv

0:07:35.780,0:07:38.660
你可以在安装时移除掉 xv，但是默认是包含的

0:07:39.400,0:07:46.640
在 extras 中还有一些软件，比如 Google Chrome，Mozilla Firefox 等

0:07:46.660,0:07:53.380
众所周知，Firefox 接受非自由软件的插件

0:07:53.380,0:07:56.440
这就造成了冲突

0:07:56.440,0:07:59.280
如果你想使用一个100%自由软件的发行版

0:07:59.280,0:08:04.000
即使默认不是100%自由软件
你也可以把它变成100%自由软件

0:08:04.000,0:08:09.340
我有一些文章和视频介绍如何将 Slackware 变成100%自由软件

0:08:09.340,0:08:10.540
只包含自由软件

0:08:10.960,0:08:14.680
我们有一个从 Slackware 分出的发行版

0:08:14.680,0:08:18.600
它不做任何改动，只是移除了那些非自由软件

0:08:18.660,0:08:20.800
xv 和 among 及其它

0:08:20.800,0:08:25.320
他们创建了自己的软件仓库，叫做 Freenix，之前叫做 FreeSlack

0:08:25.320,0:08:29.220
所以他们拥有一个100%自由软件的 Slackware

0:08:29.220,0:08:35.620
但是也可以通过一些小戏法把 Slackware 变成100% 自由软件

0:08:35.620,0:08:36.600
非常酷

0:08:37.340,0:08:40.960
(为什么 Slackware 只有很少的官方包？)

0:08:41.580,0:08:47.360
是的，打开 Slackware ISO，你会发现它有很多默认包

0:08:47.360,0:08:51.620
整个 Slackware 软件仓库包含上千个包

0:08:51.620,0:08:53.755
在 Slackware ISO 文件中

0:08:53.760,0:08:55.540
确实包的数量不多

0:08:55.540,0:08:59.320
但是当你完整安装 Slackware 后，它也能提供周到的服务

0:09:00.000,0:09:03.840
当你安装了其他东西时，它也会变得很复杂

0:09:04.520,0:09:07.480
所以 SlackBuilds 就来了

0:09:07.480,0:09:10.160
社区创建了 SlackBuilds 项目

0:09:10.160,0:09:15.600
他们的菜谱，像做饭的菜谱一样
菜谱都是用 shell 脚本写的

0:09:15.720,0:09:20.200
依照菜谱你可以编译一个软件，安装或者干别的

0:09:20.240,0:09:26.680
菜谱不包含程序源码，只包含程序所需的脚本和信息

0:09:26.680,0:09:31.640
我从2008年开始使用 Slackware

0:09:31.800,0:09:36.240
我从 SlackBuilds 受益良多，并且从来没出过什么问题

0:09:36.240,0:09:39.320
“哦，我从那儿找不到这个软件，找不到那个软件”

0:09:39.320,0:09:43.080
我总能从 SlackBuilds 找到所需，它真的很完整。

0:09:43.080,0:09:47.880
从 SlackBuilds 得到的都是源码，你需要编译

0:09:47.920,0:09:49.880
你也可以贡献代码

0:09:49.880,0:09:54.400
只需略通 shell 脚本，你就可以贡献代码

0:09:54.520,0:09:57.480
贡献代码到 SlackBuilds 项目

0:09:57.800,0:10:01.840
在项目中创建你的菜谱，它也会使他人收益

0:10:01.840,0:10:06.200
到目前为止，我在那最大的项目是 DokuWiki

0:10:06.200,0:10:09.800
类似于 Wikipedia 的一个项目，用 PHP 写的

0:10:09.960,0:10:14.320
我是 DokuWiki 菜谱脚本的维护者

0:10:14.320,0:10:16.315
有了这个脚本你就不会卡死在官方包上了

0:10:16.320,0:10:22.160
我们还有一个叫 SlackOnly 的网站，提供预编译的包

0:10:22.160,0:10:25.400
你可以通过它，只需 installpkg 就可以安装这个包

0:10:25.400,0:10:26.920
SlackOnly 就是干这个的

0:10:26.920,0:10:33.480
有很多 Slackware 软件，超乎你的想象

0:10:33.600,0:10:41.600
我向Slackware 用户墙裂推荐SlackBuilds 和 SlackOnly 

0:10:42.320,0:10:45.800
(Slackware 有包管理吗？)

0:10:46.360,0:10:49.520
初用 Slackware 时

0:10:49.520,0:10:53.640
大家都困惑于包管理的问题

0:10:53.760,0:10:56.000
网上有很多的讹传

0:10:56.000,0:11:01.000
说什么 Slackware 根本就没有包管理，真是胡扯

0:11:01.000,0:11:05.080
它确实有一个低级的包管理，叫 pkgtools

0:11:05.080,0:11:08.800
里面有很多工具, 用 shell 脚本写的

0:11:08.800,0:11:13.240
比如 installpkg 用来安装软件包，
removepkg 用来卸载软件包

0:11:13.240,0:11:17.160
upgradepkg 用来升级软件包

0:11:17.160,0:11:19.720
还有 makepkg 用来创建软件包

0:11:19.720,0:11:23.000
完全满足需求的一个低级包管理

0:11:23.000,0:11:25.915
2008左右 extra 中多了一个新成员

0:11:25.920,0:11:29.480
也是用 shell 写的一个脚本，叫做 slackpkg

0:11:29.480,0:11:32.800
一个巴西人创建的，叫 Piter Punk
爱死他了

0:11:32.800,0:11:38.920
这个脚本旨在升级系统的软件包，
升级，安装，全能

0:11:38.920,0:11:44.040
我们可以把 slackpkg 当作一个高级的包管理

0:11:44.040,0:11:46.640
但是仍然没打算处理包依赖

0:11:46.640,0:11:51.640
所以，我们有低级包管理软件：pkgtools，不处理包依赖

0:11:51.640,0:11:56.840
还有高级包管理软件：slackpkg，仍然不处理包依赖

0:11:56.840,0:12:01.320
但是我们有这些包管理软件

0:12:01.320,0:12:04.600
大家是不是有点慌，其实不必惊慌

0:12:04.600,0:12:09.800
小菜一碟，网上有很多帖子和文档

0:12:09.800,0:12:13.960
有困难了也可以上 Slackware IRC 聊一聊

0:12:13.960,0:12:17.560
他们有问必答，nice 的很

0:12:17.560,0:12:21.760
Slackware 是个友善社区

0:12:21.760,0:12:24.440
千真万确地一帮好人

0:12:25.280,0:12:28.200
(小白能用 Slackware 吗？)

0:12:29.360,0:12:34.040
用过易用发行版的小白

0:12:34.040,0:12:35.640
比如 Linux Mint

0:12:35.640,0:12:39.760
他们准备好了各个界面，“用这个界面就行，咱这发行版就这么方便”

0:12:39.760,0:12:45.520
但在 Slackware 中可能就会遇到“问题”
但是没有好好阅读文档解决不了的问题

0:12:45.520,0:12:50.920
这是 Slackware 很酷的一个地方。“这本书，或那个文档，读吧”

0:12:50.920,0:12:53.120
读完你就会用了

0:12:53.120,0:12:55.400
slackware 的名字已经说明这一切了

0:12:55.400,0:13:00.760
slack 是 slack，ware 是 ware。
(???)

0:13:00.760,0:13:04.920
所以，该系统管理员干的活，系统什么都没干

0:13:04.920,0:13:08.800
系统管理员不得不承担起管理系统的责任

0:13:08.800,0:13:11.600
对于那些从没用过终端命令行的小白

0:13:11.600,0:13:17.040
有点困难，但这也不是通过阅读文档解决不了的

0:13:17.040,0:13:19.640
或者上网搜搜

0:13:19.640,0:13:23.400
每个人都曾经是小白

0:13:23.400,0:13:26.320
我曾经也是个小白，谁都不例外

0:13:26.320,0:13:29.320
等习惯了这个系统

0:13:29.320,0:13:33.280
还有系统赋予你的权利，你会越来越爽的。

0:13:34.240,0:13:37.680
(死神到来会让这个项目停止吗？)

0:13:38.200,0:13:41.760
其实 Patrick 已经有过两次健康问题

0:13:41.760,0:13:45.080
项目曾经因此暂停，但后来又恢复正常了

0:13:45.080,0:13:50.680
所以无论遇到什么事，项目都会继续的

0:13:50.680,0:13:53.600
我们拥有一个强大而紧密的社区

0:13:53.680,0:13:56.280
我们有 Patrick 的左右手

0:13:56.280,0:13:59.200
AlienBOB，项目的杰出贡献者

0:13:59.200,0:14:01.840
我们还有 Workman，杰出贡献者

0:14:01.840,0:14:05.800
有这些人在，我相信他们会让 slackware 继续下去的

0:14:05.800,0:14:08.000
当然因为这几乎是一个个人项目

0:14:08.000,0:14:12.600
所以，Patrick 有权决定这个发行版要什么或者不要什么

0:14:12.600,0:14:15.520
项目中有很多它的个人烙印

0:14:15.520,0:14:20.720
我们在 Slackware 中见到的很多代码都是 Patrick 版本的

0:14:20.720,0:14:27.320
换个人来管理会发生什么？

0:14:27.320,0:14:30.640
我真不知道会怎样，或者交由社区管理，不知道。

0:14:30.640,0:14:33.400
那个人也会有自己的一些小想法

0:14:33.720,0:14:37.520
那个人如果想改点什么但社区不同意

0:14:37.520,0:14:40.480
“哦，让我们来保持项目的客观性”

0:14:40.480,0:14:42.720
Debian 就发生过这样的事

0:14:42.840,0:14:48.320
Ian Murdock 是 Debian 项目的创始人
他逝世之后项目仍在继续

0:14:48.320,0:14:51.915
如今 Debian 项目依然如往日一样强健

0:14:51.920,0:14:53.720
Slackware 项目也会一样的

0:14:53.720,0:14:57.800
Patrick 要有个三长两短呢？好吧，项目会自我成长，永生不老的

0:14:57.800,0:14:59.800
这可是个有历史厚重感的项目

0:15:01.000,0:15:04.640
(Slackware 官网过期了吗？)

0:15:05.160,0:15:09.520
Slackware 的官网：slackware.com

0:15:09.520,0:15:15.840
20世纪的网页设计风格，让大家惊呆了

0:15:15.840,0:15:18.840
“天呐，为什么这么老？”

0:15:18.840,0:15:23.680
网站仍在使用框架

0:15:23.680,0:15:28.720
但是这个网站的风格正是贯彻了 Slackware 的设计哲学：KISS 哲学。

0:15:28.720,0:15:30.720
KISS (Keep It Simple, Stupid) 保持它的简单易用。

0:15:31.040,0:15:33.840
维护好它，他就持续工作，持续提供服务，这就够了。

0:15:33.840,0:15:39.200
还在用 Links 或 Lynx 的老用户，终端浏览器

0:15:39.200,0:15:43.840
用终端浏览器登录一下 Slackware 网站，你可以试试

0:15:43.840,0:15:48.440
用 Links 输入网址：www.slackware.com

0:15:48.440,0:15:52.200
你会看到用 Links 浏览的网页依然完美

0:15:52.200,0:15:56.240
你可以做任何操作，并且比平常浏览器要快得多

0:15:56.240,0:16:00.120
比如 Google Chrome，Firefox，IceCat 等等

0:16:00.120,0:16:03.760
由此可见，文本模式的浏览器要简单易用的多

0:16:03.760,0:16:06.980
之前我们不得不进行复杂的操作

0:16:06.980,0:16:12.560
虽然 extras 中已经有了 slackpkg，但也不是每个人都愿意用。
那我们是怎么一顿操作猛如虎的呢？

0:16:12.560,0:16:17.680
我们先去 Slackware changlog 看看，看看有什么更新，哪些是我们需要的

0:16:17.680,0:16:22.560
然后我们随便找个镜像网站，把它下载下来

0:16:22.560,0:16:27.720
我们会打开两个终端，对两个版本进行比较

0:16:27.720,0:16:31.280
"哦，你得升级了"，然后我们就用 Links 的 D 键下载到本地

0:16:31.280,0:16:36.920
本地就有了升级包

0:16:36.920,0:16:45.280
然后用 upgradepkg 升级 *.t?z 文件
? 代表任何字母

0:16:45.280,0:16:48.320
也可能正好是 tgz 或者 txz，随它去了

0:16:48.320,0:16:52.440
敲敲键盘就把软件升级搞定了，就这么简单

0:16:52.440,0:16:56.880
很多人现在还经常这么干，我就是其中之一

0:16:56.880,0:17:02.600
现在我也图方便开始用 slackpkg 了，实用些

0:17:02.600,0:17:09.040
千古真理：“如果它干得好好的，就别动它”

0:17:09.040,0:17:13.360
同样适用于那些还在用文本浏览器的人

0:17:13.360,0:17:19.080
也都出于如上原因

0:17:20.000,0:17:23.760
(Linux 有史以来第一个包管理软件？)

0:17:24.040,0:17:26.400
很少人知道这个事实

0:17:26.400,0:17:32.480
很荣幸，在 Linux 世界中 Slackware 提供了第一款包管理软件

0:17:32.480,0:17:36.640
就在1994年，93或94

0:17:36.640,0:17:41.160
比 dpkg 早，比 rpm 早，比谁都早

0:17:41.160,0:17:45.000
它是 Linux 史上第一款包管理软件

0:17:46.480,0:17:52.680
之前在 UNIX 上或者在早期 Linux 发行版上

0:17:52.680,0:17:58.560
每个编译步骤都是手动完成的

0:17:58.560,0:18:03.200
想编译一个软件必须得先读 README 文档

0:18:03.200,0:18:06.680
通过 README，了解一步步该做什么，严格按步骤来

0:18:06.680,0:18:11.680
实际上，难免地要在终端中做些修改，才能编译通过

0:18:11.680,0:18:17.000
都要通过手动配置来编译构建

0:18:17.000,0:18:22.200
包管理可以替你搞定这一切
Patrick 就想到了

0:18:22.200,0:18:31.000
“让我们把编译过的文件放一块，让后打个包”

0:18:31.000,0:18:35.960
Slackware 包其实就是个小小的压缩包

0:18:35.960,0:18:43.240
打包成 xz 或 gz(gzip) 格式
把有用的都放在一起打包

0:18:43.240,0:18:48.160
怎么用这些包呢？
解压到用户的根目录上，然后删了它

0:18:48.160,0:18:52.960
Slackware 的包管理用的都是 shell 脚本

0:18:52.960,0:18:54.880
非常易用

0:18:54.880,0:19:01.040
大家可以一起解决这些脚本中的 bug
酷毙了，牛逼

0:19:02.080,0:19:05.560
(Slackware 使用开放版本管理软件吗？)

0:19:06.000,0:19:08.560
我们觉得这都是"一时心血来潮"

0:19:08.560,0:19:12.120
他们使用版本管理软件，比如 Git，现在很流行

0:19:12.120,0:19:19.640
Slackware 没赶这个时髦，他采用更加封闭的开发方式，全由 Patric 在弄

0:19:19.680,0:19:26.040
非开发人员的普通人看来确实如此

0:19:26.200,0:19:28.080
这样没人打扰

0:19:28.080,0:19:32.080
当我们把代码托管到 github 或 notabug，随便哪儿吧

0:19:32.080,0:19:37.800
大家都想帮忙改进，当然这很好，不过每个人都想按自己的想法来修改

0:19:37.800,0:19:42.280
这很正常，也很好，我们都有各自的自由

0:19:42.280,0:19:47.040
但是对一个项目来说可不是什么好事，
每个项目都有自己的哲学和风格

0:19:47.040,0:19:54.040
比如说，“来，让咱们加上 SystemD，加上 PAM”

0:19:54.080,0:19:58.800
对一个项目来说有点不切实际，很多人都在叽叽喳喳，“做这个吧，做那个吧”

0:19:58.800,0:20:04.200
最后只能完蛋，筑室道旁，三年不成
所以 Slackware 没有提供公共版本

0:20:05.200,0:20:08.720
(营销手段？从版本4直接到版本7)

0:20:09.080,0:20:15.880
确有其事，Slackware 从 4.0 版直接跳到了 7.0 版

0:20:15.880,0:20:22.640
上世纪90年代 Slackware 广泛被使用

0:20:22.680,0:20:31.120
但是版本总是给人已过期的错觉

0:20:31.120,0:20:36.200
比如说，其他发行版都到了 5.0，6.0 了，Slackware 还停留在 4.0 上

0:20:36.200,0:20:40.320
Patrick 做了个营销策略的改变

0:20:40.320,0:20:48.000
"直接从4.0升级到7.0，让大家觉得我们也跟上其他发行版了"

0:20:48.000,0:20:53.320
所以这仅仅是个营销策略上，虽然跳过了3个版本，其实并没有太多改变

0:20:53.320,0:20:55.440
真就是个营销策略

0:20:56.280,0:20:59.720
(你对 Slackware 有什么期望？)

0:20:59.720,0:21:05.720
我希望 Slackware 可以走得更远

0:21:05.720,0:21:08.760
更多的人能来了解它

0:21:08.760,0:21:11.640
不仅仅是光从网上听别人说三道四

0:21:11.640,0:21:16.400
"那是个过期的项目，不是每个人能玩得转"，这是胡扯

0:21:16.400,0:21:21.040
Slackware 在你日常中，在服务器上都用得到

0:21:21.040,0:21:25.240
深入研究你就会得心应手

0:21:25.240,0:21:30.800
从 Slackware 中你会获益良多的，获益良多

0:21:30.800,0:21:32.760
好的，就这些

0:21:32.760,0:21:35.760
谢谢，谢谢提供这个机会

0:21:50.000,0:21:55.880
(这个作品遵循 CC BY 4.0 协议)
